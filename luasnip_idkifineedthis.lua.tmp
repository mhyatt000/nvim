local ls = require("luasnip")
local types = require("luasnip.util.types")

ls.config.set_config {
    history = true,
    updateevents = "TextChanged,TextChangedI",
    enable_autosnippets = true,
    ext_opts = {
        [types.choiceNode] = {
            active = {
                virt_text = {{ "<--", "Error" }},
            }
        }
    }
}

require("luasnip.loaders.from_lua").load({paths = "~/.config/nvim/lua/snippets/"})

local s = ls.snippet
local sn = ls.snippet_node
local isn = ls.indent_snippet_node
local t = ls.text_node
local i = ls.insert_node
local f = ls.function_node
local c = ls.choice_node
local d = ls.dynamic_node
local r = ls.restore_node

local events = require("luasnip.util.events")
local ai = require("luasnip.nodes.absolute_indexer")
local extras = require("luasnip.extras")

local l = extras.lambda
local rep = extras.rep
local p = extras.partial
local m = extras.match
local n = extras.nonempty
local dl = extras.dynamic_lambda

local fmt = require("luasnip.extras.fmt").fmt
local fmta = require("luasnip.extras.fmt").fmta
local conds = require("luasnip.extras.expand_conditions")
local postfix = require("luasnip.extras.postfix").postfix
local parse = require("luasnip.util.parser").parse_snippet

local ms = ls.multi_snippet
local k = require("luasnip.nodes.key_indexer").new_key

-- keymaps
-- expand the current item or jump to the next item within the snippet
vim.keymap.set({"i","s"}, "<Tab>", function()
    if ls.expand_or_jumpable() then
        ls.expand_or_jump()
    end
end, {silent = true})

-- if you can jump back then jump back
vim.keymap.set({"i", "s"}, "<S-Tab>", function()
    if ls.jumpable(-1) then
        ls.jump(-1)
    end
end, {silent = true})

vim.keymap.set({"i", "s"}, "<C-Tab>", function()
	if ls.choice_active() then
		ls.change_choice(1)
	end
end, {silent = true})

require("luasnip.loaders.from_vscode").lazy_load()

vim.keymap.set("n", "<leader>z", "<cmd>source ~/.config/nvim/after/plugin/luasnip.lua<cr>")
-- custom snippets
-- The SnipMate format is very simple, so adding custom snippets only requires a few steps:
-- add a directory beside your init.vim (or any other place that is in your runtimepath) named snippets.
-- inside that directory, create files named <filetype>.snippets and add snippets for the given filetype in it (for inspiration, check honza/vim-snippets).

-- snippet <trigger> <description>
-- <snippet-body>
-- snippet if C-style if
-- if ($1)
-- $0

ls.add_snippets("all", {
    s("expand", {
        t"-- this is what was expanded!"
    }),
    s("trig", {
        i(1), t"text", i(2), t"text again", i(3)
    })
})

-- lua = {
  --  ls.parser.parse_snippet("lf", "local $1 = function($2)\n $0\nend"),
   -- },
    --)
